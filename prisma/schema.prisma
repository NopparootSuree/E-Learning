// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid()) @map("ID")
  userId            String  @map("USER_ID")
  type              String  @map("TYPE")
  provider          String  @map("PROVIDER")
  providerAccountId String  @map("PROVIDER_ACCOUNT_ID")
  refresh_token     String? @db.Text @map("REFRESH_TOKEN")
  access_token      String? @db.Text @map("ACCESS_TOKEN")
  expires_at        Int?    @map("EXPIRES_AT")
  token_type        String? @map("TOKEN_TYPE")
  scope             String? @map("SCOPE")
  id_token          String? @db.Text @map("ID_TOKEN")
  session_state     String? @map("SESSION_STATE")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("EL_ACCOUNTS")
}

model Session {
  id           String   @id @default(cuid()) @map("ID")
  sessionToken String   @unique @map("SESSION_TOKEN")
  userId       String   @map("USER_ID")
  expires      DateTime @map("EXPIRES")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("EL_SESSIONS")
}

model User {
  id            String    @id @default(cuid()) @map("ID")
  name          String?   @map("NAME")
  email         String?   @unique @map("EMAIL")
  emailVerified DateTime? @map("EMAIL_VERIFIED")
  image         String?   @map("IMAGE")
  role          String    @default("user") @map("ROLE") // "user" or "admin"
  employeeId    String?   @unique @map("EMPLOYEE_ID")
  createdAt     DateTime  @default(now()) @map("CREATED_AT")
  updatedAt     DateTime  @updatedAt @map("UPDATED_AT")

  accounts  Account[]
  sessions  Session[]
  employee  Employee? @relation(fields: [employeeId], references: [id])

  @@map("EL_USERS")
}

model VerificationToken {
  identifier String   @map("IDENTIFIER")
  token      String   @unique @map("TOKEN")
  expires    DateTime @map("EXPIRES")

  @@unique([identifier, token])
  @@map("EL_VERIFICATION_TOKENS")
}

// Employee/User model
model Employee {
  id          String    @id @default(cuid()) @map("ID")
  idEmp       String    @unique @map("ID_EMP")
  name        String    @map("NAME")
  section     String    @map("SECTION")
  department  String    @map("DEPARTMENT")
  company     String    @map("COMPANY")
  password    String?   @map("PASSWORD") // Add password field
  createdAt   DateTime  @default(now()) @map("CREATED_AT")
  updatedAt   DateTime  @updatedAt @map("UPDATED_AT")
  deletedAt   DateTime? @map("DELETED_AT")

  // Relations
  courseAttempts CourseAttempt[]
  testAttempts   TestAttempt[]
  scores         Score[]
  user           User?

  @@map("EL_EMPLOYEES")
}

// Group model (กลุ่มหลักสูตร)
model Group {
  id          String    @id @default(cuid()) @map("ID")
  title       String    @map("TITLE")
  description String?   @map("DESCRIPTION")
  order       Int       @default(0) @map("ORDER")
  isActive    Boolean   @default(true) @map("IS_ACTIVE")
  createdAt   DateTime  @default(now()) @map("CREATED_AT")
  updatedAt   DateTime  @updatedAt @map("UPDATED_AT")
  deletedAt   DateTime? @map("DELETED_AT")

  // Relations
  courses Course[]

  @@map("EL_GROUPS")
}

// Course model
model Course {
  id          String    @id @default(cuid()) @map("ID")
  groupId     String?   @map("GROUP_ID") // เชื่อมโยงกับ Group
  title       String    @map("TITLE")
  description String?   @map("DESCRIPTION")
  contentType String    @map("CONTENT_TYPE") // "video" or "pdf"
  contentUrl  String?   @map("CONTENT_URL") // URL for external content
  contentSource String  @default("url") @map("CONTENT_SOURCE") // "url" or "upload"
  contentFile String?   @map("CONTENT_FILE") // Path to uploaded file (video or PDF)
  order       Int       @default(0) @map("ORDER") // ลำดับใน Group
  isActive    Boolean   @default(true) @map("IS_ACTIVE")
  createdAt   DateTime  @default(now()) @map("CREATED_AT")
  updatedAt   DateTime  @updatedAt @map("UPDATED_AT")
  deletedAt   DateTime? @map("DELETED_AT")

  // Relations
  group          Group?          @relation(fields: [groupId], references: [id])
  tests          Test[]
  courseAttempts CourseAttempt[]
  scores         Score[]

  @@map("EL_COURSES")
}

// Test model (Pre-test & Post-test)
model Test {
  id          String    @id @default(cuid()) @map("ID")
  courseId    String    @map("COURSE_ID")
  type        String    @map("TYPE") // "pretest" or "posttest"
  title       String    @map("TITLE")
  description String?   @map("DESCRIPTION")
  isActive    Boolean   @default(true) @map("IS_ACTIVE")
  createdAt   DateTime  @default(now()) @map("CREATED_AT")
  updatedAt   DateTime  @updatedAt @map("UPDATED_AT")
  deletedAt   DateTime? @map("DELETED_AT")

  // Relations
  course       Course        @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  questions    Question[]
  testAttempts TestAttempt[]

  @@map("EL_TESTS")
}

// Question model
model Question {
  id          String    @id @default(cuid()) @map("ID")
  testId      String    @map("TEST_ID")
  type        String    @map("TYPE") // "multiple_choice" or "written"
  question    String    @map("QUESTION")
  options     String?   @map("OPTIONS") // JSON array for multiple choice options
  correctAnswer String? @map("CORRECT_ANSWER") // For multiple choice questions
  points      Int       @default(1) @map("POINTS")
  order       Int       @map("ORDER")
  createdAt   DateTime  @default(now()) @map("CREATED_AT")
  updatedAt   DateTime  @updatedAt @map("UPDATED_AT")
  deletedAt   DateTime? @map("DELETED_AT")

  // Relations
  test    Test     @relation(fields: [testId], references: [id])
  answers Answer[]

  @@map("EL_QUESTIONS")
}

// Course attempt tracking
model CourseAttempt {
  id         String    @id @default(cuid()) @map("ID")
  employeeId String    @map("EMPLOYEE_ID")
  courseId   String    @map("COURSE_ID")
  startedAt  DateTime  @default(now()) @map("STARTED_AT")
  completedAt DateTime? @map("COMPLETED_AT")
  status     String    @default("in_progress") @map("STATUS") // "in_progress", "content_viewed", "completed"
  
  // Content viewing tracking
  contentStartedAt  DateTime? @map("CONTENT_STARTED_AT") // เริ่มดูเนื้อหา
  contentCompletedAt DateTime? @map("CONTENT_COMPLETED_AT") // ดูเนื้อหาเสร็จ
  contentDuration   Int?      @map("CONTENT_DURATION") // ระยะเวลาที่ดู (วินาที)
  contentProgress   Float     @default(0) @map("CONTENT_PROGRESS") // เปอร์เซ็นต์ความคืบหน้า (0-100)
  
  createdAt  DateTime  @default(now()) @map("CREATED_AT")
  updatedAt  DateTime  @updatedAt @map("UPDATED_AT")
  deletedAt  DateTime? @map("DELETED_AT")

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id])
  course   Course   @relation(fields: [courseId], references: [id])

  @@unique([employeeId, courseId])
  @@map("EL_COURSE_ATTEMPTS")
}

// Test attempt tracking
model TestAttempt {
  id         String    @id @default(cuid()) @map("ID")
  employeeId String    @map("EMPLOYEE_ID")
  testId     String    @map("TEST_ID")
  startedAt  DateTime  @default(now()) @map("STARTED_AT")
  completedAt DateTime? @map("COMPLETED_AT")
  score      Float?    @map("SCORE")
  status     String    @default("in_progress") @map("STATUS") // "in_progress", "completed"
  createdAt  DateTime  @default(now()) @map("CREATED_AT")
  updatedAt  DateTime  @updatedAt @map("UPDATED_AT")
  deletedAt  DateTime? @map("DELETED_AT")

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id])
  test     Test     @relation(fields: [testId], references: [id])
  answers  Answer[]

  @@unique([employeeId, testId])
  @@map("EL_TEST_ATTEMPTS")
}

// Answer model
model Answer {
  id            String    @id @default(cuid()) @map("ID")
  testAttemptId String    @map("TEST_ATTEMPT_ID")
  questionId    String    @map("QUESTION_ID")
  answer        String    @map("ANSWER")
  isCorrect     Boolean?  @map("IS_CORRECT")
  points        Float     @default(0) @map("POINTS")
  createdAt     DateTime  @default(now()) @map("CREATED_AT")
  updatedAt     DateTime  @updatedAt @map("UPDATED_AT")
  deletedAt     DateTime? @map("DELETED_AT")

  // Relations
  testAttempt TestAttempt @relation(fields: [testAttemptId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  question    Question    @relation(fields: [questionId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([testAttemptId, questionId])
  @@map("EL_ANSWERS")
}

// Score tracking
model Score {
  id         String    @id @default(cuid()) @map("ID")
  employeeId String    @map("EMPLOYEE_ID")
  courseId   String    @map("COURSE_ID")
  preTestScore  Float? @map("PRE_TEST_SCORE")
  postTestScore Float? @map("POST_TEST_SCORE")
  finalScore    Float? @map("FINAL_SCORE")
  completedAt   DateTime? @map("COMPLETED_AT")
  createdAt     DateTime  @default(now()) @map("CREATED_AT")
  updatedAt     DateTime  @updatedAt @map("UPDATED_AT")
  deletedAt     DateTime? @map("DELETED_AT")

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id])
  course   Course   @relation(fields: [courseId], references: [id])

  @@unique([employeeId, courseId])
  @@map("EL_SCORES")
}