// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

// NextAuth.js models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("user") // "user" or "admin"
  employeeId    String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts  Account[]
  sessions  Session[]
  employee  Employee? @relation(fields: [employeeId], references: [id])

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Employee/User model
model Employee {
  id          String    @id @default(cuid())
  idEmp       String    @unique @map("ID_EMP")
  name        String    @map("NAME")
  section     String    @map("SECTION")
  department  String    @map("DEPARTMENT")
  company     String    @map("COMPANY")
  password    String?   @map("PASSWORD") // Add password field
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // Relations
  courseAttempts CourseAttempt[]
  testAttempts   TestAttempt[]
  scores         Score[]
  user           User?

  @@map("employees")
}

// Course model
model Course {
  id          String    @id @default(cuid())
  title       String
  description String?
  contentType String    // "video" or "powerpoint"
  contentUrl  String?   // URL for external video or PowerPoint
  videoSource String    @default("url") // "url" or "upload"
  videoFile   String?   // Path to uploaded video file
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // Relations
  tests          Test[]
  courseAttempts CourseAttempt[]
  scores         Score[]

  @@map("courses")
}

// Test model (Pre-test & Post-test)
model Test {
  id          String    @id @default(cuid())
  courseId    String
  type        String    // "pretest" or "posttest"
  title       String
  description String?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // Relations
  course       Course        @relation(fields: [courseId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  questions    Question[]
  testAttempts TestAttempt[]

  @@map("tests")
}

// Question model
model Question {
  id          String    @id @default(cuid())
  testId      String
  type        String    // "multiple_choice" or "written"
  question    String
  options     String?   // JSON array for multiple choice options
  correctAnswer String? // For multiple choice questions
  points      Int       @default(1)
  order       Int
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  // Relations
  test    Test     @relation(fields: [testId], references: [id])
  answers Answer[]

  @@map("questions")
}

// Course attempt tracking
model CourseAttempt {
  id         String    @id @default(cuid())
  employeeId String
  courseId   String
  startedAt  DateTime  @default(now())
  completedAt DateTime?
  status     String    @default("in_progress") // "in_progress", "content_viewed", "completed"
  
  // Content viewing tracking
  contentStartedAt  DateTime? // เริ่มดูเนื้อหา
  contentCompletedAt DateTime? // ดูเนื้อหาเสร็จ
  contentDuration   Int?      // ระยะเวลาที่ดู (วินาที)
  contentProgress   Float     @default(0) // เปอร์เซ็นต์ความคืบหน้า (0-100)
  
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id])
  course   Course   @relation(fields: [courseId], references: [id])

  @@unique([employeeId, courseId])
  @@map("course_attempts")
}

// Test attempt tracking
model TestAttempt {
  id         String    @id @default(cuid())
  employeeId String
  testId     String
  startedAt  DateTime  @default(now())
  completedAt DateTime?
  score      Float?
  status     String    @default("in_progress") // "in_progress", "completed"
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id])
  test     Test     @relation(fields: [testId], references: [id])
  answers  Answer[]

  @@unique([employeeId, testId])
  @@map("test_attempts")
}

// Answer model
model Answer {
  id            String    @id @default(cuid())
  testAttemptId String
  questionId    String
  answer        String
  isCorrect     Boolean?
  points        Float     @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  // Relations
  testAttempt TestAttempt @relation(fields: [testAttemptId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  question    Question    @relation(fields: [questionId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@unique([testAttemptId, questionId])
  @@map("answers")
}

// Score tracking
model Score {
  id         String    @id @default(cuid())
  employeeId String
  courseId   String
  preTestScore  Float?
  postTestScore Float?
  finalScore    Float?
  completedAt   DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  deletedAt     DateTime?

  // Relations
  employee Employee @relation(fields: [employeeId], references: [id])
  course   Course   @relation(fields: [courseId], references: [id])

  @@unique([employeeId, courseId])
  @@map("scores")
}
